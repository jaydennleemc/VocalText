name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the release (e.g., v1.0.0)'
        required: true
      release_type:
        description: 'Type of release'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease
      include_dsym:
        description: 'Include debug symbols (dSYM)'
        required: false
        default: true
        type: boolean

jobs:
  release:
    runs-on: macos-26
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Set up Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_26.0.app/Contents/Developer
        xcodebuild -version
        
    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build Release
      run: |
        # Build the project first to generate the app bundle
        xcodebuild -project VocalText.xcodeproj \
          -scheme VocalText \
          -configuration Release \
          -derivedDataPath DerivedData \
          -destination "platform=macOS,arch=arm64" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO \
          clean build
          
        # Verify the app was built successfully
        if [ ! -d "DerivedData/Build/Products/Release/VocalText.app" ]; then
          echo "❌ Build failed - app bundle not found"
          exit 1
        fi
        echo "✅ Build successful"
        
    - name: Get app version
      run: |
        # Get the app version from the project
        APP_VERSION=$(defaults read "$PWD/DerivedData/Build/Products/Release/VocalText.app/Contents/Info.plist" CFBundleShortVersionString)
        echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
        echo "App version: $APP_VERSION"
        
        # Get build number
        BUILD_NUMBER=$(defaults read "$PWD/DerivedData/Build/Products/Release/VocalText.app/Contents/Info.plist" CFBundleVersion)
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        echo "Build number: $BUILD_NUMBER"
    
    - name: Create build artifacts directory
      run: mkdir -p build-artifacts
    
    - name: Copy app bundle to artifacts directory
      run: |
        cp -R DerivedData/Build/Products/Release/VocalText.app build-artifacts/
        # Copy dSYM if requested and exists
        if [ "${{ github.event.inputs.include_dsym }}" == "true" ] && [ -d "DerivedData/Build/Products/Release/VocalText.app.dSYM" ]; then
          cp -R DerivedData/Build/Products/Release/VocalText.app.dSYM build-artifacts/
          echo "✅ dSYM included"
        else
          echo "ℹ️ dSYM not included"
        fi
    
    - name: Create ZIP archive
      run: |
        cd build-artifacts
        if [ "${{ github.event.inputs.include_dsym }}" == "true" ] && [ -d "VocalText.app.dSYM" ]; then
          zip -r "VocalText-${{ env.APP_VERSION }}.zip" "VocalText.app" "VocalText.app.dSYM"
          echo "Created: VocalText-${{ env.APP_VERSION }}.zip (with dSYM)"
        else
          zip -r "VocalText-${{ env.APP_VERSION }}.zip" "VocalText.app"
          echo "Created: VocalText-${{ env.APP_VERSION }}.zip"
        fi
    
    - name: Generate Release Notes
      run: |
        # Generate basic release notes
        echo "## VocalText ${{ github.event.inputs.version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### 🎯 Features" >> release_notes.md
        echo "- Fixed microphone permission handling in Release builds" >> release_notes.md
        echo "- Improved permission request flow to prevent repeated dialogs" >> release_notes.md
        echo "- Enhanced MainView lifecycle management" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🔧 Technical Improvements" >> release_notes.md
        echo "- Updated permission checking logic using AVAudioApplication.requestRecordPermission" >> release_notes.md
        echo "- Optimized MainView creation to prevent unnecessary re-initialization" >> release_notes.md
        echo "- Fixed compilation issues with macOS audio permission APIs" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📦 Build Information" >> release_notes.md
        echo "- Version: ${{ env.APP_VERSION }}" >> release_notes.md
        echo "- Build: ${{ env.BUILD_NUMBER }}" >> release_notes.md
        echo "- Target: macOS 15.5+" >> release_notes.md
        echo "- Architecture: Universal (ARM64 + x86_64)" >> release_notes.md
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: VocalText ${{ github.event.inputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
    
    - name: Upload ZIP to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build-artifacts/VocalText-${{ env.APP_VERSION }}.zip
        asset_name: VocalText-${{ env.APP_VERSION }}.zip
        asset_content_type: application/zip
    
    - name: Release Summary
      run: |
        echo "🎉 Release created successfully!"
        echo "📦 Version: ${{ env.APP_VERSION }}"
        echo "🏷️ Tag: ${{ github.event.inputs.version }}"
        echo "📋 Type: ${{ github.event.inputs.release_type }}"
        echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"