name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the release (e.g., v1.0.0)'
        required: true
      release_type:
        description: 'Type of release'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease

jobs:
  release:
    runs-on: macos-26
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Set up Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_26.0.app/Contents/Developer
        xcodebuild -version
        
    - name: Get app version
      run: |
        # Build the project first to generate the app bundle
        xcodebuild -project VocalText.xcodeproj \
          -scheme VocalText \
          -configuration Release \
          -derivedDataPath DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO
          
        # Get the app version from the project
        APP_VERSION=$(defaults read "$PWD/DerivedData/Build/Products/Release/VocalText.app/Contents/Info.plist" CFBundleShortVersionString)
        echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
        echo "App version: $APP_VERSION"
    
    - name: Create build artifacts directory
      run: mkdir -p build-artifacts
    
    - name: Copy app bundle to artifacts directory
      run: |
        cp -R DerivedData/Build/Products/Release/VocalText.app build-artifacts/
    
    - name: Create ZIP archive
      run: |
        zip -r "build-artifacts/VocalText-${{ env.APP_VERSION }}.zip" "build-artifacts/VocalText.app"

    - name: Archive build artifacts
      run: |
        tar -cJf build-artifacts/VocalText-macOS-${{ env.APP_VERSION }}.tar.xz -C build-artifacts VocalText.app
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: VocalText ${{ github.event.inputs.version }}
        draft: false
        prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
    
    - name: Upload ZIP to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build-artifacts/VocalText-${{ env.APP_VERSION }}.zip
        asset_name: VocalText-${{ env.APP_VERSION }}.zip
        asset_content_type: application/zip